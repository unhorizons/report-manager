security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            entity:
                class: Domain\Authentication\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            entry_point: Infrastructure\Authentication\Symfony\Authenticator\LoginFormAuthenticator
            custom_authenticator: Infrastructure\Authentication\Symfony\Authenticator\LoginFormAuthenticator

            login_link:
                check_route: authentication_login_link_check
                signature_properties: [ id, email ]
                max_uses: 3
                lifetime: 600
            form_login:
                post_only: true
                login_path: authentication_login
                failure_path: authentication_login
                username_parameter: identifier
                password_parameter: password
                csrf_parameter: _token
            logout:
                invalidate_session: true
                path: authentication_logout
                target: authentication_login
            remember_me:
                secret: "%kernel.secret%"
                lifetime: 604800 # 1 week in seconds
                path: /
                samesite: strict
            switch_user: { role: ROLE_ADMIN, parameter: _control }

    role_hierarchy:
        ROLE_ADMIN: ROLE_USER
        ROLE_SUPER_ADMIN:
            - ROLE_ADMIN
            - ROLE_USER

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
